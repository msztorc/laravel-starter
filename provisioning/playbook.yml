---
- hosts: all
  become: yes
  vars_files:
    - vars/main.yml

  tasks:

  - name: Install required packages
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - git
      - python3-selinux
      - python3-semanage
      - selinux-utils
      - python3-pip
      - python3-dev
      - libmysqlclient-dev
      - build-essential
      - nginx
      - sqlite3
      - python-setuptools
      - curl
      update_cache: yes
      state: latest

  - name: Install PyMySQL
    command: pip install PyMySQL

  - name: Install dependencies for mysql
    apt:
      name: "{{ packages }}"
      update_cache: no
      state: latest
    vars:
      packages:
      - libmysqlclient-dev
    when: ansible_distribution == "Ubuntu"

  - name: Install dependencies for mariadb
    apt:
      name: "{{ packages }}"
      update_cache: no
      state: latest
    vars:
      packages:
      - libmariadbclient-dev
    when: ansible_distribution == "Debian"

  - name: Install mysql
    apt:
      name: "{{ packages }}"
      update_cache: no
      state: latest
    vars:
      packages:
      - mysql-server
      - mysql-client

  - name: Start MySQL
    service: name=mysql state=started
    become: true

  - name: Set the correct opcache filename (Ubuntu/Debian).
    set_fact:
      php_opcache_conf_filename: "10-opcache.ini"

  - name: Add repository for latest PHP (Ubuntu).
    apt_repository: repo='ppa:ondrej/php'
    when: ansible_distribution == "Ubuntu"

  # Debian-specific tasks.
  - name: Add dependencies for latest PHP (Debian).
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
    when: ansible_distribution == "Debian"

  - name: Add Ondrej Sury's apt key (Debian).
    apt_key:
      url: https://packages.sury.org/php/apt.gpg
      state: present
    when: ansible_distribution == "Debian"

  - name: Add Ondrej Sury's repo (Debian).
    apt_repository:
      repo: "deb https://packages.sury.org/php/ {{ ansible_distribution_release }} main"
      state: present
    register: php_ondrej_debian_repo
    when: ansible_distribution == "Debian"

  - name: Update apt caches after repo is added (Debian).
    apt: update_cache=yes
    when: php_ondrej_debian_repo.changed and (ansible_distribution == "Debian")

  # PHP package purges.
  - name: Purge PHP version packages.
    apt:
      name: "{{ packages }}"
      state: absent
      purge: yes
      force: yes
    vars:
      packages:
      - php5.6-common
      - php7.0-common
      - php7.1-common
      - php7.2-common

  - name: install php
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - php7.3-cli
      - php7.3-curl
      - php7.3-fpm
      - php7.3-intl
      - php7.3-json
      - php7.3-sqlite3
      - php7.3-mbstring
      - php7.3-xml
      - php7.3-zip
      - php7.3-mysql

  - name: ensure php7.3-fpm cgi.fix_pathinfo=0
    lineinfile: dest=/etc/php/7.3/fpm/php.ini regexp='^(.*)cgi.fix_pathinfo=' line=cgi.fix_pathinfo=0
    notify:
      - restart php7.3-fpm
      - restart nginx

  - name: Create DB root user
    mysql_user: name={{db_root_name}} password={{db_root_pass}} priv="*.*:ALL,GRANT" host='%' state=present

  - name: Ensure mysql root login
    mysql_user: name={{db_root_name}} login_user={{db_root_name}} login_password={{db_root_pass}} state=absent


  - name: copy .my.cnf file with root password credentials
    template: src=.my.cnf dest=/root/.my.cnf owner=root mode=0600
    tags:
      - mycnf
    become: yes

  - name: Create the app database
    mysql_db:
      db={{app_db_name}}
      state=present

  - name: Create the app user
    mysql_user:
      name={{app_db_user}}
      password={{ app_db_pass }}
      priv={{app_db_name}}.*:ALL
      host=localhost

  - name: create /var/www/ directory
    file: dest=/var/www/ state=directory owner=www-data group=www-data mode=0755

  - name: Clone git repository
    git: >
      dest={{web_root}}
      repo=https://github.com/laravel/laravel.git
      update=no
    become: yes
    become_user: root
    register: cloned

  - name: Set swap
    shell: /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
    become: yes
    become_user: root

  - name: Set swap
    shell: /sbin/mkswap /var/swap.1
    become: yes
    become_user: root

  - name: Set swap
    shell: /sbin/swapon /var/swap.1
    become: yes
    become_user: root

  - name: install composer
    shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    become: yes
    become_user: root
    args:
      creates: /usr/local/bin/composer

  - name: composer create-project
    composer: command=create-project working_dir={{web_root}} optimize_autoloader=no
    become: yes
    become_user: root
    when: cloned

  - name: set APP_DEBUG=false
    lineinfile: dest={{web_root}}/.env regexp='^APP_DEBUG=' line=APP_DEBUG=false

  - name: set APP_ENV=production
    lineinfile: dest={{web_root}}/.env regexp='^APP_ENV=' line=APP_ENV=production

  - name: set DB_DATABASE
    lineinfile: dest={{web_root}}/.env regexp='^DB_DATABASE=' line=DB_DATABASE={{app_db_name}}

  - name: set DB_USERNAME
    lineinfile: dest={{web_root}}/.env regexp='^DB_USERNAME=' line=DB_USERNAME={{app_db_user}}

  - name: set DB_PASSWORD
    lineinfile: dest={{web_root}}/.env regexp='^DB_PASSWORD=' line=DB_PASSWORD={{app_db_pass}}

  # set app key
  - name: set APP_KEY
    lineinfile: dest={{web_root}}/.env regexp='^APP_KEY=' line=APP_KEY=base64:OcpsUbr53Dlz2HPavY8v/C757q0nIUUieIPFwuc5meE=

  - name: Configure nginx
    template: src=nginx.conf dest=/etc/nginx/sites-available/default
    notify:
      - restart php7.3-fpm
      - restart nginx

  - name: install composer packages
    composer: command=install working_dir={{web_root}} optimize_autoloader=no
    become: yes
    become_user: root

  - name: Setting group
    command: chgrp -R www-data {{web_root}}/storage {{web_root}}/bootstrap/cache
    become: yes

  - name: Setting permissions
    command: chmod -R ug+rwx {{web_root}}/storage {{web_root}}/bootstrap/cache
    become: yes

  # - name: Laravel key generate
  #   command: php artisan key:generate
  #   args:
  #     chdir: {{web_root}}

  - name: Getting ip address
    command: bash -c "hostname -I | awk '$0=$NF'"
    register: getip

  - name: Provisioning done
    debug:
      msg:
        - "--------------------------------------------------------------"
        - "Machine IP address {{ getip.stdout }}"
        - "Host {{ web_host }}  (remember to add to your hosts file)"
        - "Web address: http://{{ web_host }}"

  handlers:
    - name: restart php7.3-fpm
      service: name=php7.3-fpm state=restarted

    - name: restart nginx
      service: name=nginx state=restarted
